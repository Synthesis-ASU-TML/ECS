<jittershader name="feather plot shader">
	<description>
		draw velocity feather plot using input velocity texture
	</description>
	<param name="scale" type="float" default="0.001"/>
	<param name="tex" type="int" default="0"/>
	<param name="xfer" type="int" default="1"/>
	<param name="low" type="vec2" default="-50 -50"/>
	<param name="high" type="vec2" default="50 50"/>
	<param name="contrast" type="vec2" default="1 1"/>
	<param name="auto_color" type="int" default="1"/>
	<param name="default_color" type="vec4" default="1 1 1 1"/>
	
	<language name="glsl" version="1.2">
		<bind param="scale" program="gp"/>
		<bind param="tex" program="gp"/>
		<bind param="xfer" program="gp"/>
		<bind param="contrast" program="gp"/>
		<bind param="high" program="gp"/>
		<bind param="low" program="gp"/>
		<bind param="default_color" program="gp"/>
		<bind param="auto_color" program="gp"/>
		
		<program name="vp" type="vertex">
<![CDATA[
			#version 120
			
			varying vec2 texdim0;
			varying vec2 texdim1;
			
			void main() {
				gl_Position = gl_Vertex;
				gl_FrontColor = gl_Color;
				texdim0 = vec2(abs(gl_TextureMatrix[0][0][0]),abs(gl_TextureMatrix[0][1][1]));
				texdim1 = vec2(abs(gl_TextureMatrix[1][0][0]),abs(gl_TextureMatrix[1][1][1]));
			}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
			#version 120
			void main() {
				gl_FragColor = gl_Color;
			}
]]>
		</program>
		<program name="gp" type="geometry" vertices_out="5" input_type="points" output_type="line_strip">
<![CDATA[
			#version 120
			#extension GL_EXT_geometry_shader4 : enable
			
			uniform sampler2DRect tex;
			uniform sampler2DRect xfer;
			
			uniform float scale;
			varying in vec2 texdim0[1];
			varying in vec2 texdim1[1];
			uniform vec2 high;
			uniform vec2 low;
			uniform vec2 contrast;
			uniform vec4 default_color;
			uniform int auto_color;
			
			void main() {
				vec4 line_start = gl_PositionIn[0];
				vec2 uv = line_start.xy * texdim0[0];
				vec2 velocity = texture2DRect(tex, uv).xy;
				vec2 line = vec2(velocity.x, -velocity.y) * scale;
				line_start = line_start * vec4(2,2,1,1) - vec4(1,1,0,0);
				vec4 line_end = line_start + vec4(line, 0, 0);
				
				float arrow_length = length(line) * 0.75;
				vec2 normalized = normalize(line);
				float arrow_angle = atan(normalized.y, normalized.x);
				float arrow_angle_a = arrow_angle + 0.1;
				float arrow_angle_b = arrow_angle - 0.1;
				
				vec4 arrow_line_a = vec4(cos(arrow_angle_a), sin(arrow_angle_a), 0, 0);
				vec4 arrow_line_b = vec4(cos(arrow_angle_b), sin(arrow_angle_b), 0, 0);
				arrow_line_a = normalize(arrow_line_a) * arrow_length;
				arrow_line_b = normalize(arrow_line_b) * arrow_length;
				vec4 arrow_a = line_start + arrow_line_a;
				vec4 arrow_b = line_start + arrow_line_b;
				
				vec2 val = pow((velocity - low) / (high - low), contrast);
				val = clamp(val, vec2(0,0), vec2(1,1));
				vec4 arrow_color;
				
				if (auto_color == 1)
					arrow_color = vec4(texture2DRect(xfer, val * texdim1[0]).xyz, default_color.w);
				else
					arrow_color = default_color;
				
				gl_Position = line_start;
				gl_FrontColor = arrow_color;
				EmitVertex();
				
				gl_Position = line_end;
				gl_FrontColor = arrow_color;
				EmitVertex();
				
				gl_Position = arrow_a;
				gl_FrontColor = arrow_color;
				EmitVertex();
				
				gl_Position = line_end;
				gl_FrontColor = arrow_color;
				EmitVertex();
				
				gl_Position = arrow_b;
				gl_FrontColor = arrow_color;
				EmitVertex();
				
				EndPrimitive();
			}
]]>
		</program>
	</language>
</jittershader>
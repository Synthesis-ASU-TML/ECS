<jittershader name="feather plot shader">
	<description>
		draw velocity feather plot using input velocity texture
	</description>
	<param name="tex" type="int" default="0"/>
	<param name="color" type="vec4" default="1 1 1 1"/>
	
	<language name="glsl" version="1.2">
		<bind param="tex" program="gp"/>
		<bind param="color" program="gp"/>
			
		<program name="vp" type="vertex">
<![CDATA[
			#version 120
			varying vec2 texdim;
			
			void main() {
				gl_Position = gl_Vertex;
				gl_FrontColor = gl_Color;
				texdim = vec2(abs(gl_TextureMatrix[0][0][0]),abs(gl_TextureMatrix[0][1][1]));
			}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
			#version 120
			
			void main() {
				gl_FragColor = gl_Color;
			}
]]>
		</program>
		<program name="gp" type="geometry" vertices_out="1" input_type="points" output_type="points">
<![CDATA[
			#version 120
			#extension GL_EXT_geometry_shader4 : enable
			
			uniform sampler2DRect tex;
			
			varying in vec2 texdim[1];
			uniform vec4 color;
			
			void main() {
				// Arrow base vertex.
				vec2 px = 1.0 / texdim[0].xy;
				
				vec2 samplepos = (gl_PositionIn[0].xy + 1.0) / 2.0 * texdim[0].xy;
				samplepos = vec2(samplepos.x, samplepos.y);
				
				vec2 pos = vec2(2.0,-2.0) * (texture2DRect(tex, samplepos).xy - 0.5);
				
				gl_Position = vec4(
					pos.x, 
 					pos.y,
					gl_PositionIn[0].z, 
					gl_PositionIn[0].w
				);
 				gl_FrontColor = color;
				EmitVertex();	
				EndPrimitive();
			}
]]>
		</program>
	</language>
</jittershader>

<jittershader name="feather plot shader">
	<description>
		draw velocity feather plot using input velocity texture
	</description>
	<param name="tex" type="int" default="0"/>
	<param name="dim" type="vec2" default="100.0 100.0"/>
	<param name="arrowhead_size" type="float" default="0.01"/>
	<param name="threshold" type="float" default="0.01"/>
	
	<language name="glsl" version="1.2">
		<bind param="tex" program="gp"/>
		<bind param="dim" program="gp"/>
		<bind param="threshold" program="gp"/>
		<bind param="arrowhead_size" program="gp"/>
		
		<program name="vp" type="vertex">
<![CDATA[
			#version 120
			
			varying vec2 texdim0;
			varying vec2 texdim1;
			
			void main() {
				gl_Position = gl_Vertex;
				gl_FrontColor = gl_Color;
				texdim0 = vec2(abs(gl_TextureMatrix[0][0][0]),abs(gl_TextureMatrix[0][1][1]));
				texdim1 = vec2(abs(gl_TextureMatrix[1][0][0]),abs(gl_TextureMatrix[1][1][1]));
			}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
			#version 120
			void main() {
				gl_FragColor = gl_Color;
			}
]]>
		</program>
		<program name="gp" type="geometry" vertices_out="5" input_type="points" output_type="line_strip">
<![CDATA[
			#version 120
			#extension GL_EXT_geometry_shader4 : enable
			
			uniform sampler2DRect tex;
			
			varying in vec2 texdim0[1];
			varying in vec2 texdim1[1];
			uniform float scale;
			uniform vec2 dim;
			uniform float arrowhead_size;
			uniform float threshold;
			
			void main() {
				// Arrow base vertex.
				vec4 line_start = gl_PositionIn[0];
				
				// Velocity value from texture.
				vec2 velocity = texture2DRect(tex, line_start.xy * texdim0[0]).xy;
				vec2 scaled = (velocity / length(velocity)) / (dim / 1.5);
				// Arrow point vertex.
				vec2 line = vec2(scaled.x, -scaled.y);
				line_start = line_start * vec4(2,2,1,1) - vec4(1,1,0,0);
				vec4 line_end = line_start + vec4(scaled,0,0);//vec4(normed, 0, 0);
				
				// Arrowhead vertices.
				vec2 normalized = normalize(line);
				float arrow_angle = atan(normalized.y, normalized.x);
				float arrow_angle_a = arrow_angle + 0.785;
				float arrow_angle_b = arrow_angle - 0.785;
				
				vec4 arrow_line_a = vec4(cos(arrow_angle_a), sin(arrow_angle_a), 0, 0);
				vec4 arrow_line_b = vec4(cos(arrow_angle_b), sin(arrow_angle_b), 0, 0);
				arrow_line_a = normalize(arrow_line_a) * arrowhead_size;
				arrow_line_b = normalize(arrow_line_b) * arrowhead_size;
				vec4 arrow_a = line_end - arrow_line_a;
				vec4 arrow_b = line_end - arrow_line_b;
				
				// Draw the arrow.
				gl_Position = line_start;
				gl_FrontColor = length(line) < threshold ? vec4(0,0,0,0) : vec4(1,1,1,1);
				EmitVertex();
				
				gl_Position = line_end;
				EmitVertex();
				
				gl_Position = arrow_a;
				EmitVertex();
				
				gl_Position = line_end;
				EmitVertex();
				
				gl_Position = arrow_b;
				EmitVertex();
				
				EndPrimitive();
			}
]]>
		</program>
	</language>
</jittershader>